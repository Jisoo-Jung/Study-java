API(Application Progrmming interface)

//처음 본 코드도 분석하고 해석할 수 있으면
하나씩 손가락 대면서, 메모장 키면서 해석할 수 있으면
API를 쉽게 할 수 있다.

//프로그램 만들 때 틀 제공해주겠다.
//라이브러리 API 프라임워크 //남의 코드 갖다쓰자
//제대로 느껴야 이 3개를 구분할 수 있게 된다.

		개발에 필요한 라이브러리들의 집함.
		선배 개발자들이 만들어 놓은 소스코드.

		- 내부 API
				JDK 설치 시 제공해주는 기본 API

		- 외부 API
				선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
				보통  JAR라는 파일로 배포하며 자바 프로젝트의 build path에 추가하여 사용할 수 있다.

//JAR(//'짜르'라고 읽어야 한다. 뜻'항아리/단지')
//프로젝트 첫번째할 때 //1:1면담 진행할 것이다. //다음달 말쯤에 //물어볼 것 미리미리 적어놓기..P


//배포 연습은 집에서 해보기
//배포하는 것보다 배포한 것을 build path 하는 것이 더 중요하다.

JAR 파일로 배포하기
   배포할 클래스 또는 패키지 우클릭
   > Export > JAVA/JAR file 선택 > Next
   > destination을 원하는 경로로 선택
   > Export Java source files... 체크
   > Finish

JAR 파일을 프로젝트에 추가하기
   배포된 JAR파일을 다운 받기
   > 프로젝트 우클릭 > Build Path > Configure Build Path
   > Libraries 탭 클릭 > ClassPath(안되면 ModulePath) 클릭 > Add External JARs
   > 저장된 경로의 .jar파일을 더블 클릭으로 추가 > Apply 클릭
   > Orders and Exports 탭 클릭
   > Select All 클릭 > Apply and Close

//공식문서 읽어보기(마우스 갖다대면) 그리고 어떻게 선택하면 보임. 파란색 주석

//개발자 -> 크롬에, 구글

//000jisoo@naver.com , 최곳21# (쿨에스엠에스 아이디,비번)

//회사가면 만들어진 것에 주석을 잘 달아야 함. //요청한다고 함. //그래서 강사 코드에 주석 달아야...

//ctrl shift o -> 전체 import
============================================================================
Object 클래스
		최상위 부모 클래스로서, 모든 클래스는 자동으로 Object를 상속받는다.
		1. toString()
				항상 객체명을 출력할 때에는 toString()을 붙여서 출력해준다.
				따라서 객체명만 출력 메소드에 전달하더라도 toString()의 문자열 값이 출력된다.
				기본적으로 Object에 선언된 toString()은 소속과 필드 주소를 문자열로 리턴해주지만,
				실사용에서는 불필요한 정보이기 때문에, 재정의 후 필드의 정보를 확인하도록 구현한다.
				실무에서는 클래스 선언 시 각 필드의 초기화 여부를 확인하기 위해 toString()을 재정의하여 사용한다.
				
		2. equals()
				주소값을 비교하는 메소드이며, ==과 동일하다.
				String 클래스에서 equals()를 값 비교로 재정의하여 사용하기 때문에
				문자열 비교는 무조건 equals()로 비교한다.
				만약 주소 비교가 아닌 원하는 필드의 비교가 필요하다면 반드시 equals()를 재정의하여 사용해야 한다.

//alt shift r -> equals 선택 //매번 쓰기 어려우니, 단축키 써서 사용하면 좋다.

		3. hashCode(): 자바에서 사용하는 주소값
				JVM에서 관리하는 중복 없는 값. 실제 메모리에 할당되는 주소와 다르다
				※ 컬렌션 프레임워크 챕터에서 재정의 목적을 이해하도록 한다.

//처음 보는 메소드는 리턴타입을 먼저 확인하라
//처음부터 그런 오류 생기지 않게 미리 다 재정의를 해야 한다.

//컴벤션 국룰 알려드림 //이거 집에 가서 100번 해보세요. //적어도 10번만 해도...
//아무 클래스 만들었으면 위의 순서로 쫙쫙 만들어보기 //나중에 물어보면 수업 방해다.

===============================================================================
Wrapper Class
		

//랩. 감싸다. 큰걸로 작은 것을 감싸는 것. 개념상 엄청 큰 것인가봐. //그림 그려주심.

		기본 자료형들의 클래스 타입
		클래스타입 객체 = new 클래스타입(일반타입의 값); // boxing //기존에 있던 것을 큰 박스에 넣어주는 작업이어서
		클래스타입 객체 = 클래스타입.valueOf(일반타입의 값); // boxing 
		일반타입 변수 = 객체.OOOValue(); //unboxing

		JDK


Wrapper Class를 사용하는 이유
		기본 자료형으로 사용하는 것보다 객체로 사용하는 것이 다양한 유틸 메소드를 사용할 수 있어서
		개발할 때의 이점이 많다. 만약 객체를 일반 변수로 바꾼다면, 이는 메모리 용량을 아끼기 위해서라고 할 수 있다.
		
		1. boxing해서 쓸거 다 쓰고
		2. unboxing해서 (필드를 메모리에서 해제하자.) 메모리 아끼자! //요즘 같은 세상에서는 잘 안하겠죠?
//메모리가 넘쳐나니깐...
//잘 쓰지 않습니다. 나중에 뭐 알려주려고 하시나봄....




//17버전으로 다 바꿔놓기 //나중에 Spring 할 때 큰일날 수도
//이제부터가 자바다.
------------------------------------------------------------------------------------------

알고리즘
		어떤 문제가 발생되었을 때 해결할 수 있는 절차 혹은 순서.

자료구조(저장소)
		의미 없는 데이터를 하나의 정보로 만들어주는 알고리즘들의 집합.
		저장소의 종류에 대해 알아보자!

컬렉션 프레임워크(Collection Framework): 자료구조
		많은 데이터를 쉽고 효과적으로 관리할 수 있는 자료구조들의 집합.

//		1. List extends Collection 
//		2. Set ectends Collection
//		3. Map

//컬렉션. 뜻: 수집 //개발자들은 데이터를 수집하는 것.//

List
		List는 '인터페이스'이다. List를 지정받아 구현한 클래스들은 아래와 같다.	

		1. Vector: 용량 관리, 보안성 강화, 처리량 감소
		//정말 옛날 기능?자료구조?//아직도 Vector 쓰는 회사이면 큰일이라고 함.
		2. LinkedList: FILO로 인해 넣을 때는 빨라도 원하는 위치의 데이터를 가져오는 것이 상대적으로 느리다.							(//First in Last out)
		3. ArrayList: 인덱스로 데이터를 관리한다. 컬렉션 클래스 중 실무에서 가장 많이 사용되는 클래스이다.
					배열의 특징인 인덱스를 이용하여 값을 저장하고 관리한다.


		※ 배열과 ArrayList★의 차이
				배열은 길이에 제한을 두어야할 때 자주 사용되고,
				ArrayList는 몇 개의 데이터가 들어올 지 알 수 없을 때 사용한다.

//어떤 상황에 어떤 것을 쓰는 것이 좋을까요? 가 올바른 질문. 둘 다 특징이 다른데.
//뭐가 더 좋아요?는 말도 안되는 잘못된 질문.
























































