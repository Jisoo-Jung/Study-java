최대한

최고 재산 기록 -> 하려면 temp 라는 새로운 변수를 메소드로?? -> 정확하게 정보가 있다면 temp 대신에 다른 것을 넣기

[100]으로 확률을 설정하면 더 다양한 확률을 만들 수 있다.

오현준

확률 구할 때 배열문을 사용하지 않고 만들었음. 그러나 배열문으로 만들어야 한다고 한다. 4,5년차 되면 이해한다고 하시면서 배열문 확률 구하는 것에 대해 설명하심.


심을 작물에 대한 클래스 따로 만들어야 함. 작물을 심을 때마다 새로운 작물이 나오고 배열에 계속 저장이 되어야 함. 그리고 저장된 작물을 기르기 메뉴에 다 넣어야 함. 기르기에는 심은 작물 개체를 통채로 받아야 함.
작물에 대한 클래스를 더 만들어야 한다. // 클래스를 더 만들면 되는 것이었다.


기본 생성자가 잘 이해가 안된다.
오버로딩도 잘 이해가 안된다. 오버로딩 안되게 하기 위해 기본 생성자를 항상 만들도록 해야한다??

기본 생성자 단축키?? 

전역변수는 new의 영향을 받을 수 밖에 없다. new를 써서 호출하면 new를 통해 새로운 주소를 갖게 된다.
그 전 것은 버리는 것. 주인을 잃은 것. 더 이상 못 쓰는 것. 새롭게 new가 되면 무조건 새롭게 초기화가 된다.
메모리에 필드 2개는 있지만,  data1 이라는 친구는 !! 그림을 그림!

그러나 static을 붙이면 new의 영향을 받지 않는다.
애초에 그 필드가 만들어지는 것 자체가 생성자가 만들어지는 아이이다.
그래서 당연히 생성자의 영향을 받는거야. 근데 static은 생성자의 영향을 안 받는다는 것은 생성자로 만들어지는게 아니라는 것. 생성자가 만드는 아이가 아닌가보다. static 을 붙이면 생성자의 영향이 없구나. 이렇게 이해하는 것

메소드 때 static이 붙어있는 건 가장 먼저 메모리에 올라간다. static이 붙어있으면 컴파일러가 static 붙은 것을 찾아서 메모리에 붙여줘. 그러니깐 생성자가 올려주는게 아니라 컴파일러가 올려주는 것이다.

애초에 올라가고 들어가는 구조가 이렇게 있기 때문에 다르다.


모든 객체가 공유해하는 필드일 경우에 사용한다.

static을 만들어지는 순간 딱 하나만 만들어지나보다.
객체 100 만들었어. static 하나. 필드 100개.


그러니깐 static을 붙이는순간. 어차피 모든 객체가 다 공유할거예요 해야지 목적에 맞게 쓰는 것이다.

data1 data2 객체로 접근하는게 의미가 없다. 무조건 하나이니깐
필드 같은 경우는 다 다르니깐 다 다르게 접근하는게 맞다.

그러니깐 static이 붙어있는 필드는 소속만 알려주면 되는 것.

객체가 아니라 Class로 접근하는 것이다.

어차피 data1 data2는 객체가 공유가 되어있으니깐!

Integer.parseInt() -> 클래스로 직접 접근한 경우!
어차피 정수면 다 이렇게 변환하니, 클래스로 접근함.


여러분들이 전부 우리은행 고객이라고 생각해보자. 여러분들이 우리 은행 타입의 객체들이야
그러니깐 여러분들은 우리은행을 통해서 여러분 계좌를 조회할 수 있음.
슬기와 승민이 가지고 있는 계좌가 같다? 다르다.

무조건 각 사람 통해 가져와야 함.

우리은행의 자산. 그거는 구지 승민이 통해 갖고 와야 하나? 어차피 슬기 . 승민 통해 물어보든 똑같이 답함.
우리은행에서 가져오는 것 우리은행 자산


자동차 브랜드 - 일반
자동차 바퀴 갯수 - static




