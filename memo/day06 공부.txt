상속 - 2번째 목적을 가장 많이 쓰게 될 것이라고 함.

A와 B 중 누가 더 확장될까요? B(자식 클래스)

B가 확장된다. A로. extend

여러분이 가져다 쓸려면 반드시 메모리에 할당이 되어야 해.
B라는 클래스의 필드가 없다. B라는 필드를 올리기 위해서 new B 생성자 호출.
근데 name이랑 age는 A라는 필드에 있다.

부모에 기본생성자에 없으면 왜 오류가 나나..

A: 부모 클래스, 상위 클래스, 슈퍼 클래스, 기반 클래스
B: 자식 클래스, 하위 클래스, 서브 클래스, 파생 클래스

	회사			책			외국	   		논문			(주로 사용 단어)

컴밴션 - 회사에서 (뭐라구요??) //순서대로 ...음..?


3. protected: 다른 패키지에서 접근 불가.자식은 가능.(보호한다는 뜻. 내 자신은 내가 지킨다. 내 자식들은 접근할 수 있게 보호하는 것)

접근 권한 제어자(접근자)
		1. default: 다른 패키지에서 접근 불가.
		2. public: 모든 곳에서 접근 가능, 만약 클래스 앞에 붙인다면 메인 클래스를 의미한다.
		3. protected: 다른 패키지에서 접근 불가.자식은 가능.
		4. private: 다른 클래스에서 접근 불가. --> 제일 중요, 제일 쓰임.
			



// 보안이라고 생각하면 안된다. 약속이다. (하지 말아주라)





클래스는 타입이다. - 꼭 기억


※ 모든 자식은 부모 타입이다. - 가장 핵심 
(하나처럼 된다는 것을 느끼셨을 거예요, 라고 먼저 말씀하심....)


그림

부모에 자식을 넣겠다.

저장공간에 들어갈 값이 넘치는 건 상관없어. 그만큼 짤라내면 돼
못채웠을 때가 문제가 있음. 비어있는 껍데이는 구현이 될 수 없어서 문제가 있음.
구현이 될 수 없으면 사용할 수 없다.
원래 자식값은 자식 타입인데 부모에 넣었잖아요. 저장공간 타입은 부모타입이다.

부모라는 저장공간이 있어요. 저장공간은 아직 구현이 안되어있음. 무엇이 아직 안 들어있음.
자식타입에 있는 것을 잘라내서 넣어서 구현을 
부모저장공간에 넣으면서 부모타입으로 바뀐다는 것.
-> 업캐스팅

업캐스팅과 다운 캐스팅 똑바로 이해

플러스 알파는 자식 타입에 따로 만들어져서 괜찮다. 어딘가에 따로 저장이 되어있을거다. 그런 객체를 업캐스팅된 객체라고 합니다. 

//

왼쪽에 있는 알맹이가 오른쪽 다 채워요? 담을 수 없다. 이것은 오류다.
플러스 알파가 구현될 수 없으니깐. 다운캐스팅이 아니다.

//



//////////////





